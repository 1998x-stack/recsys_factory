from __future__ import annotations
import numpy as np, pandas as pd
from scipy.sparse import csr_matrix, hstack
from typing import List, Tuple, Dict
from ..factory import register
from ..log import logger
from .ctr_base import CTRDataset
from ..features.encoders import build_design_matrix

def _random_split_idx(n: int, train_ratio: float, seed: int) -> Tuple[np.ndarray, np.ndarray]:
    rng = np.random.default_rng(seed)
    idx = np.arange(n)
    rng.shuffle(idx)
    k = int(n * train_ratio)
    return idx[:k], idx[k:]

@register("dataset", "toy_ctr")
class ToyCTR:
    """Load toy CTR CSV generated by scripts/gen_toy_ctr.py"""
    def __init__(self, path: str, label_col: str, dense_cols: List[str], cat_cols: List[str],
                 freq_threshold: int = 2, hash_bins: int = 200000):
        self.path = path
        self.label_col = label_col
        self.dense_cols = dense_cols
        self.cat_cols = cat_cols
        self.freq_threshold = freq_threshold
        self.hash_bins = hash_bins

    def materialize(self, split: Dict) -> CTRDataset:
        logger.info(f"[dataset:toy_ctr] load {self.path}")
        df = pd.read_csv(self.path)
        y = df[self.label_col].astype(int).values
        X, field_slices, meta = build_design_matrix(
            df, dense_cols=self.dense_cols, cat_cols=self.cat_cols,
            freq_threshold=self.freq_threshold, hash_bins=self.hash_bins
        )
        tr_idx, va_idx = _random_split_idx(len(df), split.get("train_ratio", 0.8), split.get("seed", 42))
        ds = CTRDataset(X[tr_idx], y[tr_idx], X[va_idx], y[va_idx], field_slices, meta)
        logger.info(f"[dataset:toy_ctr] X={X.shape} train={ds.X_train.shape} valid={ds.X_valid.shape} pos_rate={y.mean():.3f}")
        return ds

@register("dataset", "criteo_csv")
class CriteoCSV:
    """Load local Criteo-like CSV with label, dense I1..I13, cat C1..C26."""
    def __init__(self, path: str, label_col: str, dense_cols: List[str], cat_cols: List[str],
                 freq_threshold: int = 5, hash_bins: int = 2_000_000):
        self.path = path; self.label_col = label_col
        self.dense_cols = dense_cols; self.cat_cols = cat_cols
        self.freq_threshold = freq_threshold; self.hash_bins = hash_bins

    def materialize(self, split: Dict) -> CTRDataset:
        logger.info(f"[dataset:criteo_csv] load {self.path}")
        df = pd.read_csv(self.path)
        y = df[self.label_col].astype(int).values
        X, field_slices, meta = build_design_matrix(
            df, dense_cols=self.dense_cols, cat_cols=self.cat_cols,
            freq_threshold=self.freq_threshold, hash_bins=self.hash_bins
        )
        tr_idx, va_idx = _random_split_idx(len(df), split.get("train_ratio", 0.9), split.get("seed", 42))
        ds = CTRDataset(X[tr_idx], y[tr_idx], X[va_idx], y[va_idx], field_slices, meta)
        logger.info(f"[dataset:criteo_csv] X={X.shape} train={ds.X_train.shape} valid={ds.X_valid.shape} pos_rate={y.mean():.3f}")
        return ds
